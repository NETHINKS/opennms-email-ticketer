/************************************************************
* e-mail ticketer
*
* The e-mail ticketer uses the OpenNMS ticket integration
* for creating tickets in custom ticket systems by sending 
* e-mails.
*
* @author Michael Batz <michael.batz@nethinks.com>
*************************************************************/

package org.opennms.netmgt.correlation.drools;

import java.util.List;
import java.util.Map;
import java.util.HashMap;
import org.opennms.javamail.JavaMailer;
import org.opennms.javamail.JavaMailerException;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.model.OnmsAlarm;
import org.opennms.netmgt.model.OnmsNode;
import org.opennms.netmgt.dao.api.AlarmRepository;
import org.opennms.netmgt.dao.api.NodeDao;
import org.opennms.core.spring.BeanUtils;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;

global java.lang.String CONFIG_FILENAME;
global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;


rule "ticket create event"
    when
        $e : Event( uei  == "uei.opennms.org/troubleTicket/create" )
    then
        // create ticket
        createTicket($e, CONFIG_FILENAME);

        // remove event from working memory
        retract($e);
end

function void createTicket(Event ticketEvent, String configurationFile)
{
    // load configuration file
    Properties configuration = new Properties();
    try
    {
        FileInputStream stream = new FileInputStream(configurationFile);
        configuration.load(new InputStreamReader(stream, Charset.forName("UTF-8")));
        stream.close();
    }
    catch(IOException e)
    {
        System.out.println("Drools ticketer: Could not load configuration file");
        return;
    }

    // get alarm details from ticket create event
    String alarmId = getEventParmValue(ticketEvent, "alarmId");
    String alarmUser = getEventParmValue(ticketEvent, "user");

    // get OnmsAlarm
    AlarmRepository repository = BeanUtils.getBean("daoContext", "alarmRepository", AlarmRepository.class);
    OnmsAlarm alarm;
    try
    {
        alarm = repository.getAlarm(new Integer(alarmId));
    }
    catch(NumberFormatException e)
    {
        System.out.println("Drools ticketer: Could not find alarm because alarmId is invalid");
        return;
    }
    if(alarm == null)
    {
        System.out.println("Drools ticketer: Could not find alarm " + alarmId);
        return;
    }

    // init template variables
    Map<String, String> templateVars = new HashMap<>();
    // template vars: alarm details
    templateVars.put("alarm_id", alarmId);
    templateVars.put("alarm_user", alarmUser);
    templateVars.put("alarm_uei", alarm.getUei());
    templateVars.put("alarm_sev", alarm.getSeverityLabel());
    templateVars.put("alarm_logmsg", alarm.getLogMsg());
    // template vars: node details
    if(alarm.getNodeId() != null)
    {
        OnmsNode node = BeanUtils.getBean("daoContext", "nodeDao", NodeDao.class).get(new Long(alarm.getNodeId()).intValue());
        // if node exists, create template vars
        if(node != null)
        {
            // node label
            templateVars.put("node_label", node.getLabel());
            // node assets
            templateVars.put("node_asset_additionalhardware", node.getAssetRecord().getAdditionalhardware());
            templateVars.put("node_asset_address1", node.getAssetRecord().getAddress1());
            templateVars.put("node_asset_address2", node.getAssetRecord().getAddress2());
            templateVars.put("node_asset_admin", node.getAssetRecord().getAdmin());
            templateVars.put("node_asset_autoenable", node.getAssetRecord().getAutoenable());
            templateVars.put("node_asset_building", node.getAssetRecord().getBuilding());
            templateVars.put("node_asset_category", node.getAssetRecord().getCategory());
            templateVars.put("node_asset_circuitid", node.getAssetRecord().getCircuitId());
            templateVars.put("node_asset_city", node.getAssetRecord().getCity());
            templateVars.put("node_asset_comment", node.getAssetRecord().getComment());
            templateVars.put("node_asset_connection", node.getAssetRecord().getConnection());
            templateVars.put("node_asset_country", node.getAssetRecord().getCountry());
            templateVars.put("node_asset_cpu", node.getAssetRecord().getCpu());
            templateVars.put("node_asset_dateinstalled", node.getAssetRecord().getDateInstalled());
            templateVars.put("node_asset_department", node.getAssetRecord().getDepartment());
            templateVars.put("node_asset_description", node.getAssetRecord().getDescription());
            templateVars.put("node_asset_displaycategory", node.getAssetRecord().getDisplayCategory());
            templateVars.put("node_asset_division", node.getAssetRecord().getDivision());
            templateVars.put("node_asset_enable", node.getAssetRecord().getEnable());
            templateVars.put("node_asset_floor", node.getAssetRecord().getFloor());
            templateVars.put("node_asset_hdd1", node.getAssetRecord().getHdd1());
            templateVars.put("node_asset_hdd2", node.getAssetRecord().getHdd2());
            templateVars.put("node_asset_hdd3", node.getAssetRecord().getHdd3());
            templateVars.put("node_asset_hdd4", node.getAssetRecord().getHdd4());
            templateVars.put("node_asset_hdd5", node.getAssetRecord().getHdd5());
            templateVars.put("node_asset_hdd6", node.getAssetRecord().getHdd6());
            templateVars.put("node_asset_inputpower", node.getAssetRecord().getInputpower());
            templateVars.put("node_asset_lease", node.getAssetRecord().getLease());
            templateVars.put("node_asset_leaseexpires", node.getAssetRecord().getLeaseExpires());
            templateVars.put("node_asset_maincontract", node.getAssetRecord().getMaintcontract());
            templateVars.put("node_asset_maincontractexpiration", node.getAssetRecord().getMaintContractExpiration());
            templateVars.put("node_asset_manufacturer", node.getAssetRecord().getManufacturer());
            templateVars.put("node_asset_modelnumber", node.getAssetRecord().getModelNumber());
            templateVars.put("node_asset_notifycategory", node.getAssetRecord().getNotifyCategory());
            templateVars.put("node_asset_numpowersupplies", node.getAssetRecord().getNumpowersupplies());
            templateVars.put("node_asset_operatingsystem", node.getAssetRecord().getOperatingSystem());
            templateVars.put("node_asset_password", node.getAssetRecord().getPassword());
            templateVars.put("node_asset_pollercategory", node.getAssetRecord().getPollerCategory());
            templateVars.put("node_asset_port", node.getAssetRecord().getPort());
            templateVars.put("node_asset_rack", node.getAssetRecord().getRack());
            templateVars.put("node_asset_rackunitheight", node.getAssetRecord().getRackunitheight());
            templateVars.put("node_asset_ram", node.getAssetRecord().getRam());
            templateVars.put("node_asset_region", node.getAssetRecord().getRegion());
            templateVars.put("node_asset_room", node.getAssetRecord().getRoom());
            templateVars.put("node_asset_serialnumber", node.getAssetRecord().getSerialNumber());
            templateVars.put("node_asset_slot", node.getAssetRecord().getSlot());
            templateVars.put("node_asset_snmpcommunity", node.getAssetRecord().getSnmpcommunity());
            templateVars.put("node_asset_state", node.getAssetRecord().getState());
            templateVars.put("node_asset_storagectl", node.getAssetRecord().getStoragectrl());
            templateVars.put("node_asset_supportphone", node.getAssetRecord().getSupportPhone());
            templateVars.put("node_asset_thresholdcategory", node.getAssetRecord().getThresholdCategory());
            templateVars.put("node_asset_username", node.getAssetRecord().getUsername());
            templateVars.put("node_asset_vendor", node.getAssetRecord().getVendor());
            templateVars.put("node_asset_vendorassetnumber", node.getAssetRecord().getVendorAssetNumber());
            templateVars.put("node_asset_vendorfax", node.getAssetRecord().getVendorFax());
            templateVars.put("node_asset_vendorphone", node.getAssetRecord().getVendorPhone());
            templateVars.put("node_asset_zip", node.getAssetRecord().getZip());
        }
    }

    // load message and subject template
    String mailSubject = configuration.getProperty("subject", "OpenNMS Alarm {{alarm_id}}");
    String mailBodyFile = configuration.getProperty("message.template", "mailbody.tpl");
    String message = "";
    try
    {
        message = new String(Files.readAllBytes(Paths.get(mailBodyFile)));
    }
    catch(IOException e)
    {
        System.out.println("Drools ticketer: Could not find mail body file");
        return;
    }

    // replace template variables in subject and message
    for(Map.Entry<String,String> entry : templateVars.entrySet())
    {
        String key = entry.getKey();
        String value = entry.getValue();
        if(value == null)
        {
            value = "";
        }
        mailSubject = mailSubject.replace("{{" + key + "}}", value);
        message = message.replace("{{" + key + "}}", value);
    }
    // replace undefined template variables in subject and message with empty string
    mailSubject = mailSubject.replaceAll("\\Q{{\\E[a-zA-Z_0-9]+\\Q}}\\E", "");
    message = message.replaceAll("\\Q{{\\E[a-zA-Z_0-9]+\\Q}}\\E", "");

    // get from address from configuration
    String mailSender = configuration.getProperty("user." + alarmUser + ".mail");


    // send e-mail
    String mailReceiver = configuration.getProperty("receiver", "example@example.com");
    sendMail(mailSender, mailReceiver, mailSubject, message);
}



/**
* Gets an event parameter value
* @return String value of the event parameter, or an empty string if key does not exist
*/
function String getEventParmValue(Event event, String key)
{
    //prepare output
    String result = "";

    //go through all parms
    List<Parm> eventparms = event.getParmCollection();
    for(Parm parm : eventparms )
    {
        if(parm.getParmName().equals(key))
        {
            result = parm.getValue().getContent();
        }
    }

    return result;
}


function void sendMail(String sender, String receiver, String subject, String message)
{
    // create e-mail
    JavaMailer jm = new JavaMailer();
    if(sender != null)
    {
        jm.setFrom(sender);
    }
    jm.setTo(receiver);
    jm.setSubject(subject);
    jm.setMessageText(message);

    // send mail
    try
    {
        jm.mailSend();
    }
    catch(JavaMailerException e)
    {
        System.out.println("Drools ticketr: Error creating e-mail ticket");
    }
}
