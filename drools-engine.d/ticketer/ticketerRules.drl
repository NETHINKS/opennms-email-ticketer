/************************************************************
* e-mail ticketer
*
* The e-mail ticketer uses the OpenNMS ticket integration
* for creating tickets in custom ticket systems by sending 
* e-mails.
*
* @author Michael Batz <michael.batz@nethinks.com>
*************************************************************/

package org.opennms.netmgt.correlation.drools;

import java.util.List;
import java.util.Map;
import java.util.HashMap;
import org.opennms.javamail.JavaMailer;
import org.opennms.javamail.JavaMailerException;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.model.OnmsAlarm;
import org.opennms.netmgt.model.OnmsNode;
import org.opennms.netmgt.dao.api.AlarmRepository;
import org.opennms.netmgt.dao.api.NodeDao;
import org.opennms.core.spring.BeanUtils;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

global java.lang.String MAIL_RECEIVER;
global java.lang.String MAIL_SUBJECT;
global java.lang.String MAIL_BODY_FILE;
global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;


rule "ticket create event"
    when
        $e : Event( uei  == "uei.opennms.org/troubleTicket/create" )
    then
        // create ticket
        createTicket($e, MAIL_RECEIVER, MAIL_SUBJECT, MAIL_BODY_FILE);

        // remove event from working memory
        retract($e);
end

function void createTicket(Event ticketEvent, String mailReceiver, String mailSubject, String mailBodyFile)
{
    //get alarmId from Event
    String alarmId = getEventParmValue(ticketEvent, "alarmId");

    //get OnmsAlarm
    AlarmRepository repository = BeanUtils.getBean("daoContext", "alarmRepository", AlarmRepository.class);
    OnmsAlarm alarm = repository.getAlarm(new Integer(alarmId));
    if(alarm == null)
    {
        System.out.println("Drools ticketer: Could not find alarm " + alarmId);
        return;
    }

    //get nodeLabel, if node exists
    String nodeLabel = "";
    if(alarm.getNodeId() != null)
    {
        OnmsNode node = BeanUtils.getBean("daoContext", "nodeDao", NodeDao.class).get(new Long(alarm.getNodeId()).intValue());
        if(node != null)
        {
            nodeLabel = node.getLabel();
        }
    }

    // get message from template file
    String message = "";
    try
    {
        message = new String(Files.readAllBytes(Paths.get(mailBodyFile)));
    }
    catch(IOException e)
    {
        System.out.println("Drools ticketer: Could not find mail body file");
        return;
    }

    // replace template variables
    Map<String, String> templateVars = new HashMap<>();
    templateVars.put("node_label", nodeLabel);
    templateVars.put("alarm_id", alarm.getId().toString());
    templateVars.put("alarm_uei", alarm.getUei());
    templateVars.put("alarm_sev", alarm.getSeverityLabel());
    templateVars.put("alarm_logmsg", alarm.getLogMsg());
    for(Map.Entry<String,String> entry : templateVars.entrySet())
    {
        mailSubject = mailSubject.replace("{{" + entry.getKey() + "}}", entry.getValue());
        message = message.replace("{{" + entry.getKey() + "}}", entry.getValue());
    }

    //send e-mail
    sendMail(mailReceiver, mailSubject, message);
}



/**
* Gets an event parameter value
* @return String value of the event parameter, or an empty string if key does not exist
*/
function String getEventParmValue(Event event, String key)
{
    //prepare output
    String result = "";

    //go through all parms
    List<Parm> eventparms = event.getParmCollection();
    for(Parm parm : eventparms )
    {
        if(parm.getParmName().equals(key))
        {
            result = parm.getValue().getContent();
        }
    }

    return result;
}


function void sendMail(String receiver, String subject, String message)
{
    // create e-mail
    JavaMailer jm = new JavaMailer();
    jm.setTo(receiver);
    jm.setSubject(subject);
    jm.setMessageText(message);

    // send mail
    System.out.println(subject);
    System.out.println(message);
    try
    {
        jm.mailSend();
    }
    catch(JavaMailerException e)
    {
        System.out.println("Drools ticketr: Error creating e-mail ticket");
    }
}
